/*+**************************************************************************/
/***                                                                      ***/
/***   This file is distributed under a BSD license.                      ***/
/***   See LICENSE.txt for details.                                       ***/
/***                                                                      ***/
/**************************************************************************+*/

header
{
#include "wz4frlib/wz4_modmtrl.hpp"
#include "wz4frlib/wz4_modmtrlsc.hpp"
#include "wz4frlib/wz4_mtrl2.hpp"
#include "wz4frlib/wz4_mtrl2_ops.hpp"
#include "wz4lib/gui.hpp"
}

/****************************************************************************/

header
{
  enum ModMtrlRTMode
  {
    MMRTM_DirShadow = 1,
    MMRTM_SpotShadow,
    MMRTM_PointShadow,
  };
}

type ModMtrl : Wz4Mtrl
{
  name = "Modular Material";
  color = 0xff60e060;
  flags = render3d|notab;
  gui = base3d;

  header
  {
    void Init();
    void Exit();
    void PrepareRenderR(Wz4RenderContext *ctx);
    void BeginRenderR(Wz4RenderContext *ctx);
    void PrepareViewR(sViewport &view);
    void EndRenderR(Wz4RenderContext *ctx);
    void BeginShow(wPaintInfo &pi);

    ModEnvNum *EnvNum[sMAX_ENVNUM];
    sInt RenderShadowsForEnvNum;
//    sMatrix34 ViewMatrix;
    sFrustum ViewFrustum;
    sAABBox ShadowCaster;
    class ShaderCreator *sc;

    Texture2D *SinCosTex;
    Texture2D *DummyTex2D;
    TextureCube *DummyTexCube;
  }
}

type ModShader
{
  name = "Material Shader";
  color = 0xff40c040;
  flags = notab;
}

type ModShaderSampler : ModShader
{
  name = "Material Shader (Sampler)";
  color = 0xff20a020;
  flags = notab;
}

header
{
  class ModShaderSampler : public ModShader
  {
  public:
    ModShaderSampler();
  };
//  typedef ModShader ModShaderSampler;
}


operator ModMtrl ModMaterial(?*ModShader)
{
  tab = Wz4Mtrl;
  column = 0;
  shortcut = 'w';
  parameter
  {
    flags Flags("*0zoff|zread|zwrite|zon:*4Doublesided|Singlesided|Inverted") = 0x13;
    continue flags Flags "ColorMask" ("*8-|MaskAlpha:*9-|MaskRed:*10-|MaskGreen:*11-|MaskBlue");
    layout flags Blend("solid|alpha premul|add|sub|mul|mul2|addsmooth|alpha plain|const alpha:*4dest alpha from shader|dest alpha unchanged|dest alpha = 0|dest alpha blend");
    layout flags AlphaTest ("|||inverted|on|||off")=7;
    if((AlphaTest&255)!=7 || (Blend &15)==8)
      nolabel int AlphaRef (0..255 step 1);
//    continue layout flags AlphaTest "Destination Alpha"("*8-|Const");
//    if(AlphaTest&256)
//      nolabel int AlphaOut  (0..255 step 1);
    if(0) int dummy0[2];
 
    narrow flags AllowLight ("-| 0:*1-| 1:*2-| 2:*3-| 3:*4-| 4:*5-| 5:*6-| 6:*7-| 7")=0xffffffff;
    narrow action All(3);
    narrow flags AllowShadow("-| 0:*1-| 1:*2-| 2:*3-| 3:*4-| 4:*5-| 5:*6-| 6:*7-| 7")=0xffffffff;
    narrow action All(4);
    flags AllowFeatures("-|Fog:*1-|GroundFog:*2-|ClipPlanes")=0xffffffff;
    flags FeatureFlags("-|FogIsBlack:*1CastShadow|-:*2Ambient|-:*3-|swap fogs:*8-|fog alpha");
    continue flags FeatureFlags "Emissive"("*4Add|Screen:*6-|suppress reflection rim|supress reflection center");
    continue flags FeatureFlags "Cast Shadow in EnvNum"("*9my own|all");
    continue flags FeatureFlags "Normals"("*10precise|compact:*11-|double sided");
    group "Debug";
    action Shaderlog(1);
    action FlushShaders(2);

    group "Shader Editor";
    layout flags EditShader("-|vertex shader|pixel shader|both")=0;
    if(EditShader != 0)
    {
      layout flags CustomCode("-|enabled")=0;

      if(EditShader&1)
      {
        group "Vertex shader";
        if(CustomCode == 0)
          action GetVS(5);
        lines 20 string VertexShader;
      }

      if(EditShader&2)
      {
        group "Pixel shader";
        if(CustomCode == 0)
          action GetPS(6);
        lines 20 string PixelShader;
      }
    }
  }
  code
  {
    for(sInt i=0;i<cmd->InputCount;i++)
    {
      ModShader *in = cmd->GetInput<ModShader *>(i);
      if(in)
      {
        sAddRefAll(in->Modules);
        out->ModulesUser.Add(in->Modules);
      }
    }
    static sU32 blend[16] = 
    { 0,sMB_PMALPHA,sMB_ADD,sMB_SUB,sMB_MUL,sMB_MUL2,sMB_ADDSMOOTH,sMB_ALPHA,sMBS_F|sMBO_ADD|sMBD_FI };
    sU32 blendc = blend[para->Blend & 15];
    sU32 blenda = sMBS_1|sMBO_ADD|sMBD_0;
    if(para->Blend & 0x30)
    {
      if(blendc==sMB_OFF)
        blendc = sMBS_1|sMBO_ADD|sMBD_0;
      if((para->Blend & 0x30)==0x10)
        blenda = sMBS_0|sMBO_ADD|sMBD_1;
      if((para->Blend & 0x30)==0x20)
        blenda = sMBS_0|sMBO_ADD|sMBD_0;
      if((para->Blend & 0x30)==0x30)
        blenda = sMBS_1|sMBO_ADD|sMBD_SAI;
    }

    out->KillFeatures = para->AllowFeatures;
    out->KillLight = sU8(para->AllowLight);
    out->KillShadow = sU8(para->AllowShadow);
    out->FeatureFlags = para->FeatureFlags;
    out->SetMtrl(para->Flags,blendc,blenda);
    out->SetAlphaTest(para->AlphaTest,para->AlphaRef);

    out->ShaderVertexCode = cmd->Strings[0];
    out->ShaderPixelCode = cmd->Strings[1];

    if(para->CustomCode && para->EditShader&1)
      out->isCustomVertexShader = 1;
    if(para->CustomCode && para->EditShader&2)
      out->isCustomPixelShader = 1;

    // for debugging, log where the op is

    if(cmd->Op)
    {
      out->PageName = cmd->Op->Page->Name;
      if(!cmd->Op->Page->IsTree)
      {
        out->PageX = ((wStackOp *)cmd->Op)->PosX;
        out->PageY = ((wStackOp *)cmd->Op)->PosY;
      }
    }

    // ..

    out->Prepare();
    if(out->Error)
      return 0;
    if(cmd->Op)
    {
      cmd->Op->RefObj->Release();
      cmd->Op->RefObj = out; out->AddRef();
    }
  }
  actions
  {
    if(code==1)
    { 
      if(op->RefObj)
      {
        ModMtrl *mtrl = (ModMtrl*) op->RefObj;
        if(mtrl && mtrl->ShaderLog.GetCount())
          App->PopupText(mtrl->ShaderLog.Get());
      }
      return 0;
    }
    if(code==2)
    { 
      return 1;
    }
    if(code==3)
    {
      if(para->AllowLight==0) para->AllowLight=~0;
      else para->AllowLight = 0;
      return 1;
    }
    if(code==4)
    {
      if(para->AllowShadow==0) para->AllowShadow=~0;
      else para->AllowShadow = 0;
      return 1;
    }

    // get vertex shader code
    if(code==5)
    {
      if(op->RefObj)
      {
        ModMtrl *mtrl = (ModMtrl*) op->RefObj;
        if(mtrl && mtrl->ShaderVertexCode.GetCount())
        {
          *op->EditString[0] = mtrl->ShaderVertexCode.Get();
        }
      }
      return 0;
    }

    // get pixel shader code
    if(code==6)
    {
      if(op->RefObj)
      {
        ModMtrl *mtrl = (ModMtrl*) op->RefObj;
        if(mtrl && mtrl->ShaderVertexCode.GetCount())
        {
          op->EditString[1]->Clear();
          *op->EditString[1] = mtrl->ShaderPixelCode.Get();
        }
      }
      return 0;
    }


    return 0;
  }
}

/****************************************************************************/
/***                                                                      ***/
/***   Environemnt                                                        ***/
/***                                                                      ***/
/****************************************************************************/

header_end
{
  class RNModLightSingle : public Wz4RenderNode
  {
    sInt LightId;
  public:
    Wz4RenderParaModLightSingle Para,ParaBase;
    Wz4RenderAnimModLightSingle Anim;

    RNModLightSingle();
    ~RNModLightSingle();

    void Init();
    void Simulate(Wz4RenderContext *);
    void Render(Wz4RenderContext *);
    void Transform(Wz4RenderContext *ctx, const sMatrix34 &mat);
  };
}

operator Wz4Render ModLightSingle (?Wz4Render)
{
  tab = Wz4Mtrl;
  column = 1;
  shortcut = 'z';
  parameter
  {
    action Swap_RG(1);
    action Swap_RB(2);
    action Swap_GB(3);
    int Index "EnvNum" (0..15);
    int Renderpass (-127..127);

    // light 0

    group "light 0";
    layout flags Mode0("off|dir|point|spot");
    if(Mode0&15)
    {
      layout continue nolabel flags Mode0("*4-|shadow:*7-|headlight");
      if((Mode0&15)==3) layout continue nolabel flags Mode0("*5-|inner:*6-|falloff");

      anim color Front0("rgb")=0xffffff;
      anim nolabel float FrontAmp0(-1024..1024 step 0.01)=1;
      anim color Middle0("rgb");
      anim nolabel float MiddleAmp0(-1024..1024 step 0.01)=1;
      anim color Back0("rgb");
      anim nolabel float BackAmp0(-1024..1024 step 0.01)=1;
      if((Mode0&15)>=2)
        anim float31 Pos0(-10000000..10000000 step 0.01);
      if((Mode0&15)!=2)
       anim float30 Dir0(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode0&15)>=2)
      {
        anim float Range0(0..10000000 step 0.01) = 16;
      }
      if((Mode0&15)==3)
      {
        if(Mode0&0x20)
          anim float Inner0(0..1 step 0.01) = 0.2;
        anim float Outer0(0..1 step 0.01) = 0.5;
        if(Mode0&0x40)
          anim float Falloff0(0..64 step 0.01) = 1;
      }
      if(Mode0&0x10)
      {
        anim flags ShadowSize0(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize0 "ShadowFilter0" ("*16point|ordered|random");
        anim float ShadowBaseBias0(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter0(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias0(-1024..1024 step 0.001) = 0.5000;
      }
    }
    if(0) float dummya0[3];
    if(0) float dummyb0[4];

    group "limit shadows";
    narrow layout flags LimitShadows("-| 0:*1-| 1:*2-| 2:*3-| 3:*4-| 4:*5-| 5:*6-| 6:*7-| 7")=0;
    if(LimitShadows)
    {
//      continue flags LimitShadows "Flags" ("*16:light|dark");
      anim float31 LimitCenter(-1024..1024);
      anim float30 LimitRadius(0..1024) = 64;
    }

  }
  code
  {
    RNModLightSingle *node = new RNModLightSingle;
    node->ParaBase = *para;
    node->Init();
    out->RootNode = node;
    out->AddChilds(cmd,para->Renderpass);
  }
}

/*****************************/

header_end
{
  class RNModLight2 : public Wz4RenderNode
  {
    sBool Accu;
  public:
    Wz4RenderParaModLight2 Para,ParaBase;
    Wz4RenderAnimModLight2 Anim;

    RNModLight2();
    ~RNModLight2();

    void Simulate(Wz4RenderContext *);
    void Render(Wz4RenderContext *);
    void Transform(Wz4RenderContext *ctx, const sMatrix34 &mat);
  };
}

operator Wz4Render ModLight2 "ModLight2" (?Wz4Render)
{
  tab = Wz4Mtrl;
  column = 1;
  shortcut = 'z';
  parameter
  {
    action Swap_RG(1);
    action Swap_RB(2);
    action Swap_GB(3);
    int Index "EnvNum" (0..15);
    int Renderpass (-127..127);

    color Ambient("rgb");

// light 0

    group "light 0";
    layout flags Mode0("off|dir|point|spot");
    if(Mode0&15)
    {
      layout continue nolabel flags Mode0("*4-|shadow:*7-|headlight");
      if((Mode0&15)==3) layout continue nolabel flags Mode0("*5-|inner:*6-|falloff");

      anim color Front0("rgb")=0xffffff;
      anim nolabel float FrontAmp0(-1024..1024 step 0.01)=1;
      anim color Middle0("rgb");
      anim nolabel float MiddleAmp0(-1024..1024 step 0.01)=1;
      anim color Back0("rgb");
      anim nolabel float BackAmp0(-1024..1024 step 0.01)=1;
      if((Mode0&15)>=2)
        anim float31 Pos0(-10000000..10000000 step 0.01);
      if((Mode0&15)!=2)
       anim float30 Dir0(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode0&15)>=2)
      {
        anim float Range0(0..10000000 step 0.01) = 16;
      }
      if((Mode0&15)==3)
      {
        if(Mode0&0x20)
          anim float Inner0(0..1 step 0.01) = 0.2;
        anim float Outer0(0..1 step 0.01) = 0.5;
        if(Mode0&0x40)
          anim float Falloff0(0..64 step 0.01) = 1;
      }
      if(Mode0&0x10)
      {
        anim flags ShadowSize0(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize0 "ShadowFilter0" ("*16point|ordered|random");
        anim float ShadowBaseBias0(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter0(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias0(-1024..1024 step 0.001) = 0.5000;
      }
      layout flags Multiply0("-|enabled");
      if(Multiply0==1)
      {
        anim int Count0(1..1024) = 2;
        anim float31 mulScale0 (-1024..1024 step 0.01) = 1;
        anim float30 mulRot0 (-16..16 step 0.01) = 0;
        anim float31 mulTrans0 (-0x10000..0x10000 step 0.01) = { 0,0,0 };
      }
    }
    if(0) float dummya0[3];
    if(0) float dummyb0[4];

// light 1

    group "light 1";
    layout flags Mode1("off|dir|point|spot");
    if(Mode1&15)
    {
      layout continue nolabel flags Mode1("*4-|shadow:*7-|headlight");
      if((Mode1&15)==3) layout continue nolabel flags Mode1("*5-|inner:*6-|falloff");

      anim color Front1("rgb")=0xffffff;
      anim nolabel float FrontAmp1(-1024..1024 step 0.01)=1;
      anim color Middle1("rgb");
      anim nolabel float MiddleAmp1(-1024..1024 step 0.01)=1;
      anim color Back1("rgb");
      anim nolabel float BackAmp1(-1024..1024 step 0.01)=1;
      if((Mode1&15)>=2)
        anim float31 Pos1(-10000000..10000000 step 0.01);
      if((Mode1&15)!=2)
       anim float30 Dir1(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode1&15)>=2)
      {
        anim float Range1(0..10000000 step 0.01) = 16;
      }
      if((Mode1&15)==3)
      {
        if(Mode1&0x20)
          anim float Inner1(0..1 step 0.01) = 0.2;
        anim float Outer1(0..1 step 0.01) = 0.5;
        if(Mode1&0x40)
          anim float Falloff1(0..64 step 0.01) = 1;
      }
      if(Mode1&0x10)
      {
        anim flags ShadowSize1(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize1 "ShadowFilter1" ("*16point|ordered|random");
        anim float ShadowBaseBias1(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter1(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias1(-1024..1024 step 0.001) = 0.5000;
      }
      layout flags Multiply1("-|enabled");
      if(Multiply1==1)
      {
        anim int Count1(1..1024) = 2;
        anim float31 mulScale1 (-1024..1024 step 0.01) = 1;
        anim float30 mulRot1 (-16..16 step 0.01) = 0;
        anim float31 mulTrans1 (-0x10000..0x10000 step 0.01) = { 0,0,0 };
      }
    }
    if(0) float dummya1[3];
    if(0) float dummyb1[4];

// light 2

    group "light 2";
    layout flags Mode2("off|dir|point|spot");
    if(Mode2&15)
    {
      layout continue nolabel flags Mode2("*4-|shadow:*7-|headlight");
      if((Mode2&15)==3) layout continue nolabel flags Mode2("*5-|inner:*6-|falloff");

      anim color Front2("rgb")=0xffffff;
      anim nolabel float FrontAmp2(-1024..1024 step 0.01)=1;
      anim color Middle2("rgb");
      anim nolabel float MiddleAmp2(-1024..1024 step 0.01)=1;
      anim color Back2("rgb");
      anim nolabel float BackAmp2(-1024..1024 step 0.01)=1;
      if((Mode2&15)>=2)
        anim float31 Pos2(-10000000..10000000 step 0.01);
      if((Mode2&15)!=2)
       anim float30 Dir2(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode2&15)>=2)
      {
        anim float Range2(0..10000000 step 0.01) = 16;
      }
      if((Mode2&15)==3)
      {
        if(Mode2&0x20)
          anim float Inner2(0..1 step 0.01) = 0.2;
        anim float Outer2(0..1 step 0.01) = 0.5;
        if(Mode2&0x40)
          anim float Falloff2(0..64 step 0.01) = 1;
      }
      if(Mode2&0x10)
      {
        anim flags ShadowSize2(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize2 "ShadowFilter2" ("*16point|ordered|random");
        anim float ShadowBaseBias2(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter2(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias2(-1024..1024 step 0.001) = 0.5000;
      }
      layout flags Multiply2("-|enabled");
      if(Multiply2==1)
      {
        anim int Count2(1..1024) = 2;
        anim float31 mulScale2 (-1024..1024 step 0.01) = 1;
        anim float30 mulRot2 (-16..16 step 0.01) = 0;
        anim float31 mulTrans2 (-0x10000..0x10000 step 0.01) = { 0,0,0 };
      }
    }
    if(0) float dummya2[3];
    if(0) float dummyb2[4];

// light 3

    group "light 3";
    layout flags Mode3("off|dir|point|spot");
    if(Mode3&15)
    {
      layout continue nolabel flags Mode3("*4-|shadow:*7-|headlight");
      if((Mode3&15)==3) layout continue nolabel flags Mode3("*5-|inner:*6-|falloff");

      anim color Front3("rgb")=0xffffff;
      anim nolabel float FrontAmp3(-1024..1024 step 0.01)=1;
      anim color Middle3("rgb");
      anim nolabel float MiddleAmp3(-1024..1024 step 0.01)=1;
      anim color Back3("rgb");
      anim nolabel float BackAmp3(-1024..1024 step 0.01)=1;
      if((Mode3&15)>=2)
        anim float31 Pos3(-10000000..10000000 step 0.01);
      if((Mode3&15)!=2)
       anim float30 Dir3(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode3&15)>=2)
      {
        anim float Range3(0..10000000 step 0.01) = 16;
      }
      if((Mode3&15)==3)
      {
        if(Mode3&0x20)
          anim float Inner3(0..1 step 0.01) = 0.2;
        anim float Outer3(0..1 step 0.01) = 0.5;
        if(Mode3&0x40)
          anim float Falloff3(0..64 step 0.01) = 1;
      }
      if(Mode3&0x10)
      {
        anim flags ShadowSize3(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize3 "ShadowFilter3" ("*16point|ordered|random");
        anim float ShadowBaseBias3(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter3(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias3(-1024..1024 step 0.001) = 0.5000;
      }
      layout flags Multiply3("-|enabled");
      if(Multiply3==1)
      {
        anim int Count3(1..1024) = 2;
        anim float31 mulScale3 (-1024..1024 step 0.01) = 1;
        anim float30 mulRot3 (-16..16 step 0.01) = 0;
        anim float31 mulTrans3 (-0x10000..0x10000 step 0.01) = { 0,0,0 };
      }
    }
    if(0) float dummya3[3];
    if(0) float dummyb3[4];

// light 4

    group "light 4";
    layout flags Mode4("off|dir|point|spot");
    if(Mode4&15)
    {
      layout continue nolabel flags Mode4("*4-|shadow:*7-|headlight");
      if((Mode4&15)==3) layout continue nolabel flags Mode4("*5-|inner:*6-|falloff");

      anim color Front4("rgb")=0xffffff;
      anim nolabel float FrontAmp4(-1024..1024 step 0.01)=1;
      anim color Middle4("rgb");
      anim nolabel float MiddleAmp4(-1024..1024 step 0.01)=1;
      anim color Back4("rgb");
      anim nolabel float BackAmp4(-1024..1024 step 0.01)=1;
      if((Mode4&15)>=2)
        anim float31 Pos4(-10000000..10000000 step 0.01);
      if((Mode4&15)!=2)
       anim float30 Dir4(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode4&15)>=2)
      {
        anim float Range4(0..10000000 step 0.01) = 16;
      }
      if((Mode4&15)==3)
      {
        if(Mode4&0x20)
          anim float Inner4(0..1 step 0.01) = 0.2;
        anim float Outer4(0..1 step 0.01) = 0.5;
        if(Mode4&0x40)
          anim float Falloff4(0..64 step 0.01) = 1;
      }
      if(Mode4&0x10)
      {
        anim flags ShadowSize4(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize4 "ShadowFilter0" ("*16point|ordered|random");
        anim float ShadowBaseBias4(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter4(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias4(-1024..1024 step 0.001) = 0.5000;
      }
      layout flags Multiply4("-|enabled");
      if(Multiply4==1)
      {
        anim int Count4(1..1024) = 2;
        anim float31 mulScale4 (-1024..1024 step 0.01) = 1;
        anim float30 mulRot4 (-16..16 step 0.01) = 0;
        anim float31 mulTrans4 (-0x10000..0x10000 step 0.01) = { 0,0,0 };
      }
    }
    if(0) float dummya4[3];
    if(0) float dummyb4[4];

// light 5

    group "light 5";
    layout flags Mode5("off|dir|point|spot");
    if(Mode5&15)
    {
      layout continue nolabel flags Mode5("*4-|shadow:*7-|headlight");
      if((Mode5&15)==3) layout continue nolabel flags Mode5("*5-|inner:*6-|falloff");

      anim color Front5("rgb")=0xffffff;
      anim nolabel float FrontAmp5(-1024..1024 step 0.01)=1;
      anim color Middle5("rgb");
      anim nolabel float MiddleAmp5(-1024..1024 step 0.01)=1;
      anim color Back5("rgb");
      anim nolabel float BackAmp5(-1024..1024 step 0.01)=1;
      if((Mode5&15)>=2)
        anim float31 Pos5(-10000000..10000000 step 0.01);
      if((Mode5&15)!=2)
       anim float30 Dir5(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode5&15)>=2)
      {
        anim float Range5(0..10000000 step 0.01) = 16;
      }
      if((Mode5&15)==3)
      {
        if(Mode5&0x20)
          anim float Inner5(0..1 step 0.01) = 0.2;
        anim float Outer5(0..1 step 0.01) = 0.5;
        if(Mode5&0x40)
          anim float Falloff5(0..64 step 0.01) = 1;
      }
      if(Mode5&0x10)
      {
        anim flags ShadowSize5(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize5 "ShadowFilter0" ("*16point|ordered|random");
        anim float ShadowBaseBias5(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter5(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias5(-1024..1024 step 0.001) = 0.5000;
      }
      layout flags Multiply5("-|enabled");
      if(Multiply5==1)
      {
        anim int Count5(1..1024) = 2;
        anim float31 mulScale5 (-1024..1024 step 0.01) = 1;
        anim float30 mulRot5 (-16..16 step 0.01) = 0;
        anim float31 mulTrans5 (-0x10000..0x10000 step 0.01) = { 0,0,0 };
      }
    }
    if(0) float dummya5[3];
    if(0) float dummyb5[4];

// light 6

    group "light 6";
    layout flags Mode6("off|dir|point|spot");
    if(Mode6&15)
    {
      layout continue nolabel flags Mode6("*4-|shadow:*7-|headlight");
      if((Mode6&15)==3) layout continue nolabel flags Mode6("*5-|inner:*6-|falloff");

      anim color Front6("rgb")=0xffffff;
      anim nolabel float FrontAmp6(-1024..1024 step 0.01)=1;
      anim color Middle6("rgb");
      anim nolabel float MiddleAmp6(-1024..1024 step 0.01)=1;
      anim color Back6("rgb");
      anim nolabel float BackAmp6(-1024..1024 step 0.01)=1;
      if((Mode6&15)>=2)
        anim float31 Pos6(-10000000..10000000 step 0.01);
      if((Mode6&15)!=2)
       anim float30 Dir6(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode6&15)>=2)
      {
        anim float Range6(0..10000000 step 0.01) = 16;
      }
      if((Mode6&15)==3)
      {
        if(Mode6&0x20)
          anim float Inner6(0..1 step 0.01) = 0.2;
        anim float Outer6(0..1 step 0.01) = 0.5;
        if(Mode6&0x40)
          anim float Falloff6(0..64 step 0.01) = 1;
      }
      if(Mode6&0x10)
      {
        anim flags ShadowSize6(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize6 "ShadowFilter0" ("*16point|ordered|random");
        anim float ShadowBaseBias6(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter6(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias6(-1024..1024 step 0.001) = 0.5000;
      }
      layout flags Multiply6("-|enabled");
      if(Multiply6==1)
      {
        anim int Count6(1..1024) = 2;
        anim float31 mulScale6 (-1024..1024 step 0.01) = 1;
        anim float30 mulRot6 (-16..16 step 0.01) = 0;
        anim float31 mulTrans6 (-0x10000..0x10000 step 0.01) = { 0,0,0 };
      }
    }
    if(0) float dummya6[3];
    if(0) float dummyb6[4];

// light 7

    group "light 7";
    layout flags Mode7("off|dir|point|spot");
    if(Mode7&15)
    {
      layout continue nolabel flags Mode7("*4-|shadow:*7-|headlight");
      if((Mode7&15)==3) layout continue nolabel flags Mode7("*5-|inner:*6-|falloff");

      anim color Front7("rgb")=0xffffff;
      anim nolabel float FrontAmp7(-1024..1024 step 0.01)=1;
      anim color Middle7("rgb");
      anim nolabel float MiddleAmp7(-1024..1024 step 0.01)=1;
      anim color Back7("rgb");
      anim nolabel float BackAmp7(-1024..1024 step 0.01)=1;
      if((Mode7&15)>=2)
        anim float31 Pos7(-10000000..10000000 step 0.01);
      if((Mode7&15)!=2)
       anim float30 Dir7(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode7&15)>=2)
      {
        anim float Range7(0..10000000 step 0.01) = 16;
      }
      if((Mode7&15)==3)
      {
        if(Mode7&0x20)
          anim float Inner7(0..1 step 0.01) = 0.2;
        anim float Outer7(0..1 step 0.01) = 0.5;
        if(Mode7&0x40)
          anim float Falloff7(0..64 step 0.01) = 1;
      }
      if(Mode7&0x10)
      {
        anim flags ShadowSize7(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize7 "ShadowFilter0" ("*16point|ordered|random");
        anim float ShadowBaseBias7(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter7(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias7(-1024..1024 step 0.001) = 0.5000;
      }
      layout flags Multiply7("-|enabled");
      if(Multiply7==1)
      {
        anim int Count7(1..1024) = 2;
        anim float31 mulScale7 (-1024..1024 step 0.01) = 1;
        anim float30 mulRot7 (-16..16 step 0.01) = 0;
        anim float31 mulTrans7 (-0x10000..0x10000 step 0.01) = { 0,0,0 };
      }
    }
    if(0) float dummya7[3];
    if(0) float dummyb7[4];

    // limit shadow receiver

    group "limit shadows";
    narrow layout flags LimitShadows("-| 0:*1-| 1:*2-| 2:*3-| 3:*4-| 4:*5-| 5:*6-| 6:*7-| 7")=0;
    if(LimitShadows)
    {
//      continue flags LimitShadows "Flags" ("*16:light|dark");
      anim float31 LimitCenter(-1024..1024);
      anim float30 LimitRadius(0..1024) = 64;
    }

    group "Global Transform";
    layout flags TransformEnable("-|transformed");
    if(TransformEnable&1)
    {
      anim float31 Scale(-1024..1024 step 0.01) = 1;
      anim float30 Rot(-16..16 step 0.001);
      anim float31 Trans(-1024..1024 step 0.01);
    }

    group "Individual Transform";
    layout flags TransformEnable0("-|transformed0");
    if(TransformEnable0&1)
    {
      anim float31 Scale0(-1024..1024 step 0.01) = 1;
      anim float30 Rot0(-16..16 step 0.001);
      anim float31 Trans0(-1024..1024 step 0.01);
    }

    layout flags TransformEnable1("-|transformed1");
    if(TransformEnable1&1)
    {
      anim float31 Scale1(-1024..1024 step 0.01) = 1;
      anim float30 Rot1(-16..16 step 0.001);
      anim float31 Trans1(-1024..1024 step 0.01);
    }

    layout flags TransformEnable2("-|transformed2");
    if(TransformEnable2&1)
    {
      anim float31 Scale2(-1024..1024 step 0.01) = 1;
      anim float30 Rot2(-16..16 step 0.001);
      anim float31 Trans2(-1024..1024 step 0.01);
    }

    layout flags TransformEnable3("-|transformed3");
    if(TransformEnable3&1)
    {
      anim float31 Scale3(-1024..1024 step 0.01) = 1;
      anim float30 Rot3(-16..16 step 0.001);
      anim float31 Trans3(-1024..1024 step 0.01);
    }

    layout flags TransformEnable4("-|transformed4");
    if(TransformEnable4&1)
    {
      anim float31 Scale4(-1024..1024 step 0.01) = 1;
      anim float30 Rot4(-16..16 step 0.001);
      anim float31 Trans4(-1024..1024 step 0.01);
    }

    layout flags TransformEnable5("-|transformed5");
    if(TransformEnable5&1)
    {
      anim float31 Scale5(-1024..1024 step 0.01) = 1;
      anim float30 Rot5(-16..16 step 0.001);
      anim float31 Trans5(-1024..1024 step 0.01);
    }

    layout flags TransformEnable6("-|transformed6");
    if(TransformEnable6&1)
    {
      anim float31 Scale6(-1024..1024 step 0.01) = 1;
      anim float30 Rot6(-16..16 step 0.001);
      anim float31 Trans6(-1024..1024 step 0.01);
    }

    layout flags TransformEnable7("-|transformed7");
    if(TransformEnable7&1)
    {
      anim float31 Scale7(-1024..1024 step 0.01) = 1;
      anim float30 Rot7(-16..16 step 0.001);
      anim float31 Trans7(-1024..1024 step 0.01);
    }

    group "Animation Script"; overbox overlabel linenumber lines 5 string Script;
  }
  code
  {
    RNModLight2 *node = new RNModLight2;
    node->ParaBase = *para;
    out->RootNode = node;
    out->AddChilds(cmd,para->Renderpass);
  }
  actions
  {
    if(code)
    {
      sU32 am=0;
      sU32 bm=0;
      sU32 cm=0;
      sInt bs=0;
      sInt cs=0;

      switch(code)
      {
      case 1:     // RG
        am = 0x0000ff;
        bm = 0xff0000; bs = 8;
        cm = 0x00ff00; cs = 8;
        break;
      case 2:     // RB
        am = 0x00ff00;
        bm = 0xff0000; bs = 16;
        cm = 0x0000ff; cs = 16;
        break;
      case 3:     // GB
        am = 0xff0000;
        bm = 0x00ff00; bs = 8;
        cm = 0x0000ff; cs = 8;
        break;
      }

      #define SWAPPER(col) col = (col&am) | ((col&bm)>>bs) | ((col&cm)<<cs)
      SWAPPER(para->Ambient);
      SWAPPER(para->Front0);  SWAPPER(para->Back0);  SWAPPER(para->Middle0);
      SWAPPER(para->Front1);  SWAPPER(para->Back1);  SWAPPER(para->Middle1);
      SWAPPER(para->Front2);  SWAPPER(para->Back2);  SWAPPER(para->Middle2);
      SWAPPER(para->Front3);  SWAPPER(para->Back3);  SWAPPER(para->Middle3);
      SWAPPER(para->Front4);  SWAPPER(para->Back4);  SWAPPER(para->Middle4);
      SWAPPER(para->Front5);  SWAPPER(para->Back5);  SWAPPER(para->Middle5);
      SWAPPER(para->Front6);  SWAPPER(para->Back6);  SWAPPER(para->Middle6);
      SWAPPER(para->Front7);  SWAPPER(para->Back7);  SWAPPER(para->Middle7);
      #undef SWAPPER

      return 1;
    }
    return 0;
  }
  handles
  {
    sInt mode[8];
    sVector31 *ppos[8];
    sVector30 *pdir[8];
    sF32 *range[8];

    sInt max = 0;
    mode[max] = para->Mode0; ppos[max] = &para->Pos0; pdir[max] = &para->Dir0; range[max] = &para->Range0; max++;
    mode[max] = para->Mode1; ppos[max] = &para->Pos1; pdir[max] = &para->Dir1; range[max] = &para->Range1; max++;
    mode[max] = para->Mode2; ppos[max] = &para->Pos2; pdir[max] = &para->Dir2; range[max] = &para->Range2; max++;
    mode[max] = para->Mode3; ppos[max] = &para->Pos3; pdir[max] = &para->Dir3; range[max] = &para->Range3; max++;
    mode[max] = para->Mode4; ppos[max] = &para->Pos4; pdir[max] = &para->Dir4; range[max] = &para->Range4; max++;
    mode[max] = para->Mode5; ppos[max] = &para->Pos5; pdir[max] = &para->Dir5; range[max] = &para->Range5; max++;
    mode[max] = para->Mode6; ppos[max] = &para->Pos6; pdir[max] = &para->Dir6; range[max] = &para->Range6; max++;
    mode[max] = para->Mode7; ppos[max] = &para->Pos7; pdir[max] = &para->Dir7; range[max] = &para->Range7; max++;

    sSRT srt;
    sMatrix34 mat;
    if(para->TransformEnable)
    {
      srt.Scale = para->Scale;
      srt.Rotate = para->Rot;
      srt.Translate = para->Trans;
    }
    else
    {
      srt.Scale = sVector31(1);
      srt.Rotate = sVector30(0);
      srt.Translate = sVector31(0);
    }
    srt.MakeMatrix(mat);

    sMatrix34 matIndiv[8];
    for(sInt i=0;i<8;i++)
      matIndiv[i].Init();

    if(para->TransformEnable0)
    {
      srt.Scale = para->Scale0;
      srt.Rotate = para->Rot0;
      srt.Translate = para->Trans0;
      srt.MakeMatrix(matIndiv[0]);
    }

    if(para->TransformEnable1)
    {
      srt.Scale = para->Scale1;
      srt.Rotate = para->Rot1;
      srt.Translate = para->Trans1;
      srt.MakeMatrix(matIndiv[1]);
    }

    if(para->TransformEnable2)
    {
      srt.Scale = para->Scale2;
      srt.Rotate = para->Rot2;
      srt.Translate = para->Trans2;
      srt.MakeMatrix(matIndiv[2]);
    }

    if(para->TransformEnable3)
    {
      srt.Scale = para->Scale3;
      srt.Rotate = para->Rot3;
      srt.Translate = para->Trans3;
      srt.MakeMatrix(matIndiv[3]);
    }

    if(para->TransformEnable4)
    {
      srt.Scale = para->Scale4;
      srt.Rotate = para->Rot4;
      srt.Translate = para->Trans4;
      srt.MakeMatrix(matIndiv[4]);
    }

    if(para->TransformEnable5)
    {
      srt.Scale = para->Scale5;
      srt.Rotate = para->Rot5;
      srt.Translate = para->Trans5;
      srt.MakeMatrix(matIndiv[5]);
    }

    if(para->TransformEnable6)
    {
      srt.Scale = para->Scale6;
      srt.Rotate = para->Rot6;
      srt.Translate = para->Trans6;
      srt.MakeMatrix(matIndiv[6]);
    }

    if(para->TransformEnable7)
    {
      srt.Scale = para->Scale7;
      srt.Rotate = para->Rot7;
      srt.Translate = para->Trans7;
      srt.MakeMatrix(matIndiv[7]);
    }

    sVector31 * vStart;
    sVector30 vEnd;

    for(sInt i=0;i<max;i++)
    {
      sInt type = (mode[i]&15);
      switch(type)
      {
        case 0:   // off
          break;

        case 2:   // point

          // init vectors
          vStart = ppos[i];

          // update Handle pos
          *vStart *= matIndiv[i];
          pi.Handle3D(op,i+1, *vStart, wHM_PLANE);
          *vStart *= matIndiv[i].Inverse();

          // end = ground base
          vEnd.x = vStart->x;
          vEnd.y = 0;
          vEnd.z = vStart->z;

          // draw line
          pi.Line3D(*vStart * matIndiv[i], sVector31(vEnd) * matIndiv[i]);
          break;

        case 1:   // directionnal
        case 3:   // spot

          // init vectors
          vStart = ppos[i];
          vEnd = *pdir[i];

          // init line length
          vEnd.Unit();
          vEnd *= *range[i]/2;

          // update Handle pos
          *vStart *= matIndiv[i];
          pi.Handle3D(op,i+1, *vStart, wHM_PLANE);
          *vStart *= matIndiv[i].Inverse();

          // add pos to dir
          vEnd.x += vStart->x;
          vEnd.y += vStart->y;
          vEnd.z += vStart->z;

          // draw line
          pi.Line3D(*vStart * matIndiv[i], sVector31(vEnd) * matIndiv[i]);
          break;
      }
    }
  }
}

header_end
{
  class RNModLight : public Wz4RenderNode
  {
  public:
    Wz4RenderParaModLight Para,ParaBase;
    Wz4RenderAnimModLight Anim;

    RNModLight();
    ~RNModLight();

    void Simulate(Wz4RenderContext *);
    void Render(Wz4RenderContext *);
  };
}

operator Wz4Render ModLight (?Wz4Render)
{
  tab = Wz4Mtrl;
  column = 1;
  shortcut = 'L';
  parameter
  {
    action Swap_RG(1);
    action Swap_RB(2);
    action Swap_GB(3);
    int Index "EnvNum" (0..15);
    int Renderpass (-127..127);

    color Ambient("rgb");

// light 0 

    group "light 0";
    layout flags Mode0("off|dir|point|spot");
    if(Mode0&15)
    {
      layout continue nolabel flags Mode0("*4-|shadow:*7-|headlight");
      if((Mode0&15)==3) layout continue nolabel flags Mode0("*5-|inner:*6-|falloff"); 

      anim color Front0("rgb")=0xffffff;
      anim nolabel float FrontAmp0(-1024..1024 step 0.01)=1;
      anim color Middle0("rgb");
      anim nolabel float MiddleAmp0(-1024..1024 step 0.01)=1;
      anim color Back0("rgb");
      anim nolabel float BackAmp0(-1024..1024 step 0.01)=1;
      if((Mode0&15)>=2)
        anim float31 Pos0(-10000000..10000000 step 0.01);
      if((Mode0&15)!=2)
       anim float30 Dir0(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode0&15)>=2)
      {
        anim float Range0(0..10000000 step 0.01) = 16;
      }
      if((Mode0&15)==3)
      {
        if(Mode0&0x20)
          anim float Inner0(0..1 step 0.01) = 0.2;
        anim float Outer0(0..1 step 0.01) = 0.5;
        if(Mode0&0x40)
          anim float Falloff0(0..64 step 0.01) = 1;
      }
      if(Mode0&0x10)
      {
        anim flags ShadowSize0(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize0 "ShadowFilter0" ("*16point|ordered|random");
        anim float ShadowBaseBias0(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter0(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias0(-1024..1024 step 0.001) = 0.5000;
      }
    }
    if(0) float dummya0[3];
    if(0) float dummyb0[4];

// light 1

    group "light 1";
    layout flags Mode1("off|dir|point|spot");
    if(Mode1&15)
    {
      layout continue nolabel flags Mode1("*4-|shadow:*7-|headlight");
      if((Mode1&15)==3) layout continue nolabel flags Mode1("*5-|inner:*6-|falloff"); 

      anim color Front1("rgb")=0xffffff;
      anim nolabel float FrontAmp1(-1024..1024 step 0.01)=1;
      anim color Middle1("rgb");
      anim nolabel float MiddleAmp1(-1024..1024 step 0.01)=1;
      anim color Back1("rgb");
      anim nolabel float BackAmp1(-1024..1024 step 0.01)=1;
      if((Mode1&15)>=2)
        anim float31 Pos1(-10000000..10000000 step 0.01);
      if((Mode1&15)!=2)
       anim float30 Dir1(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode1&15)>=2)
      {
        anim float Range1(0..10000000 step 0.01) = 16;
      }
      if((Mode1&15)==3)
      {
        if(Mode1&0x20)
          anim float Inner1(0..1 step 0.01) = 0.2;
        anim float Outer1(0..1 step 0.01) = 0.5;
        if(Mode1&0x40)
          anim float Falloff1(0..64 step 0.01) = 1;
      }
      if(Mode1&0x10)
      {
        anim flags ShadowSize1(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize1 "ShadowFilter1" ("*16point|ordered|random");
        anim float ShadowBaseBias1(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter1(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias1(-1024..1024 step 0.001) = 0.5000;
      }
    }
    if(0) float dummya1[3];
    if(0) float dummyb1[4];

// light 2

    group "light 2";
    layout flags Mode2("off|dir|point|spot");
    if(Mode2&15)
    {
      layout continue nolabel flags Mode2("*4-|shadow:*7-|headlight");
      if((Mode2&15)==3) layout continue nolabel flags Mode2("*5-|inner:*6-|falloff"); 

      anim color Front2("rgb")=0xffffff;
      anim nolabel float FrontAmp2(-1024..1024 step 0.01)=1;
      anim color Middle2("rgb");
      anim nolabel float MiddleAmp2(-1024..1024 step 0.01)=1;
      anim color Back2("rgb");
      anim nolabel float BackAmp2(-1024..1024 step 0.01)=1;
      if((Mode2&15)>=2)
        anim float31 Pos2(-10000000..10000000 step 0.01);
      if((Mode2&15)!=2)
       anim float30 Dir2(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode2&15)>=2)
      {
        anim float Range2(0..10000000 step 0.01) = 16;
      }
      if((Mode2&15)==3)
      {
        if(Mode2&0x20)
          anim float Inner2(0..1 step 0.01) = 0.2;
        anim float Outer2(0..1 step 0.01) = 0.5;
        if(Mode2&0x40)
          anim float Falloff2(0..64 step 0.01) = 1;
      }
      if(Mode2&0x10)
      {
        anim flags ShadowSize2(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize2 "ShadowFilter2" ("*16point|ordered|random");
        anim float ShadowBaseBias2(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter2(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias2(-1024..1024 step 0.001) = 0.5000;
      }
    }
    if(0) float dummya2[3];
    if(0) float dummyb2[4];

// light 3

    group "light 3";
    layout flags Mode3("off|dir|point|spot");
    if(Mode3&15)
    {
      layout continue nolabel flags Mode3("*4-|shadow:*7-|headlight");
      if((Mode3&15)==3) layout continue nolabel flags Mode3("*5-|inner:*6-|falloff"); 

      anim color Front3("rgb")=0xffffff;
      anim nolabel float FrontAmp3(-1024..1024 step 0.01)=1;
      anim color Middle3("rgb");
      anim nolabel float MiddleAmp3(-1024..1024 step 0.01)=1;
      anim color Back3("rgb");
      anim nolabel float BackAmp3(-1024..1024 step 0.01)=1;
      if((Mode3&15)>=2)
        anim float31 Pos3(-10000000..10000000 step 0.01);
      if((Mode3&15)!=2)
       anim float30 Dir3(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode3&15)>=2)
      {
        anim float Range3(0..10000000 step 0.01) = 16;
      }
      if((Mode3&15)==3)
      {
        if(Mode3&0x20)
          anim float Inner3(0..1 step 0.01) = 0.2;
        anim float Outer3(0..1 step 0.01) = 0.5;
        if(Mode3&0x40)
          anim float Falloff3(0..64 step 0.01) = 1;
      }
      if(Mode3&0x10)
      {
        anim flags ShadowSize3(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize3 "ShadowFilter3" ("*16point|ordered|random");
        anim float ShadowBaseBias3(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter3(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias3(-1024..1024 step 0.001) = 0.5000;
      }
    }
    if(0) float dummya3[3];
    if(0) float dummyb3[4];

// light 4 

    group "light 4";
    layout flags Mode4("off|dir|point|spot");
    if(Mode4&15)
    {
      layout continue nolabel flags Mode4("*4-|shadow:*7-|headlight");
      if((Mode4&15)==3) layout continue nolabel flags Mode4("*5-|inner:*6-|falloff"); 

      anim color Front4("rgb")=0xffffff;
      anim nolabel float FrontAmp4(-1024..1024 step 0.01)=1;
      anim color Middle4("rgb");
      anim nolabel float MiddleAmp4(-1024..1024 step 0.01)=1;
      anim color Back4("rgb");
      anim nolabel float BackAmp4(-1024..1024 step 0.01)=1;
      if((Mode4&15)>=2)
        anim float31 Pos4(-10000000..10000000 step 0.01);
      if((Mode4&15)!=2)
       anim float30 Dir4(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode4&15)>=2)
      {
        anim float Range4(0..10000000 step 0.01) = 16;
      }
      if((Mode4&15)==3)
      {
        if(Mode4&0x20)
          anim float Inner4(0..1 step 0.01) = 0.2;
        anim float Outer4(0..1 step 0.01) = 0.5;
        if(Mode4&0x40)
          anim float Falloff4(0..64 step 0.01) = 1;
      }
      if(Mode4&0x10)
      {
        anim flags ShadowSize4(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize4 "ShadowFilter0" ("*16point|ordered|random");
        anim float ShadowBaseBias4(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter4(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias4(-1024..1024 step 0.001) = 0.5000;
      }
    }
    if(0) float dummya4[3];
    if(0) float dummyb4[4];

// light 5

    group "light 5";
    layout flags Mode5("off|dir|point|spot");
    if(Mode5&15)
    {
      layout continue nolabel flags Mode5("*4-|shadow:*7-|headlight");
      if((Mode5&15)==3) layout continue nolabel flags Mode5("*5-|inner:*6-|falloff"); 

      anim color Front5("rgb")=0xffffff;
      anim nolabel float FrontAmp5(-1024..1024 step 0.01)=1;
      anim color Middle5("rgb");
      anim nolabel float MiddleAmp5(-1024..1024 step 0.01)=1;
      anim color Back5("rgb");
      anim nolabel float BackAmp5(-1024..1024 step 0.01)=1;
      if((Mode5&15)>=2)
        anim float31 Pos5(-10000000..10000000 step 0.01);
      if((Mode5&15)!=2)
       anim float30 Dir5(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode5&15)>=2)
      {
        anim float Range5(0..10000000 step 0.01) = 16;
      }
      if((Mode5&15)==3)
      {
        if(Mode5&0x20)
          anim float Inner5(0..1 step 0.01) = 0.2;
        anim float Outer5(0..1 step 0.01) = 0.5;
        if(Mode5&0x40)
          anim float Falloff5(0..64 step 0.01) = 1;
      }
      if(Mode5&0x10)
      {
        anim flags ShadowSize5(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize5 "ShadowFilter0" ("*16point|ordered|random");
        anim float ShadowBaseBias5(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter5(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias5(-1024..1024 step 0.001) = 0.5000;
      }
    }
    if(0) float dummya5[3];
    if(0) float dummyb5[4];

// light 6

    group "light 6";
    layout flags Mode6("off|dir|point|spot");
    if(Mode6&15)
    {
      layout continue nolabel flags Mode6("*4-|shadow:*7-|headlight");
      if((Mode6&15)==3) layout continue nolabel flags Mode6("*5-|inner:*6-|falloff"); 

      anim color Front6("rgb")=0xffffff;
      anim nolabel float FrontAmp6(-1024..1024 step 0.01)=1;
      anim color Middle6("rgb");
      anim nolabel float MiddleAmp6(-1024..1024 step 0.01)=1;
      anim color Back6("rgb");
      anim nolabel float BackAmp6(-1024..1024 step 0.01)=1;
      if((Mode6&15)>=2)
        anim float31 Pos6(-10000000..10000000 step 0.01);
      if((Mode6&15)!=2)
       anim float30 Dir6(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode6&15)>=2)
      {
        anim float Range6(0..10000000 step 0.01) = 16;
      }
      if((Mode6&15)==3)
      {
        if(Mode6&0x20)
          anim float Inner6(0..1 step 0.01) = 0.2;
        anim float Outer6(0..1 step 0.01) = 0.5;
        if(Mode6&0x40)
          anim float Falloff6(0..64 step 0.01) = 1;
      }
      if(Mode6&0x10)
      {
        anim flags ShadowSize6(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize6 "ShadowFilter0" ("*16point|ordered|random");
        anim float ShadowBaseBias6(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter6(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias6(-1024..1024 step 0.001) = 0.5000;
      }
    }
    if(0) float dummya6[3];
    if(0) float dummyb6[4];

// light 7

    group "light 7";
    layout flags Mode7("off|dir|point|spot");
    if(Mode7&15)
    {
      layout continue nolabel flags Mode7("*4-|shadow:*7-|headlight");
      if((Mode7&15)==3) layout continue nolabel flags Mode7("*5-|inner:*6-|falloff"); 

      anim color Front7("rgb")=0xffffff;
      anim nolabel float FrontAmp7(-1024..1024 step 0.01)=1;
      anim color Middle7("rgb");
      anim nolabel float MiddleAmp7(-1024..1024 step 0.01)=1;
      anim color Back7("rgb");
      anim nolabel float BackAmp7(-1024..1024 step 0.01)=1;
      if((Mode7&15)>=2)
        anim float31 Pos7(-10000000..10000000 step 0.01);
      if((Mode7&15)!=2)
       anim float30 Dir7(-10000000..10000000 step 0.01) = { 0,0,0 };
      if((Mode7&15)>=2)
      {
        anim float Range7(0..10000000 step 0.01) = 16;
      }
      if((Mode7&15)==3)
      {
        if(Mode7&0x20)
          anim float Inner7(0..1 step 0.01) = 0.2;
        anim float Outer7(0..1 step 0.01) = 0.5;
        if(Mode7&0x40)
          anim float Falloff7(0..64 step 0.01) = 1;
      }
      if(Mode7&0x10)
      {
        anim flags ShadowSize7(" 1| 2| 4| 8| 16| 32| 64| 128| 256| 512| 1024| 2048| 4096| 8192") = 10;
        continue flags ShadowSize7 "ShadowFilter0" ("*16point|ordered|random");
        anim float ShadowBaseBias7(-1024..1024 step 0.0001) = 0.5000;
        anim float ShadowFilter7(0..1024 step 0.01) = 0.500;
        if(0) anim float ShadowSlopeBias7(-1024..1024 step 0.001) = 0.5000;
      }
    }
    if(0) float dummya7[3];
    if(0) float dummyb7[4];

    // limit shadow receiver

    group "limit shadows";
    narrow layout flags LimitShadows("-| 0:*1-| 1:*2-| 2:*3-| 3:*4-| 4:*5-| 5:*6-| 6:*7-| 7")=0;
    if(LimitShadows)
    {
//      continue flags LimitShadows "Flags" ("*16:light|dark");
      anim float31 LimitCenter(-1024..1024);
      anim float30 LimitRadius(0..1024) = 64;
    }

    group "Global Transform";
    layout flags TransformEnable("-|transformed");
    if(TransformEnable&1)
    {
      anim float31 Scale(-1024..1024 step 0.01) = 1;
      anim float30 Rot(-16..16 step 0.001);
      anim float31 Trans(-1024..1024 step 0.01);
    }

    group "Individual Transform";
    layout flags TransformEnable0("-|transformed0");
    if(TransformEnable0&1)
    {
      anim float31 Scale0(-1024..1024 step 0.01) = 1;
      anim float30 Rot0(-16..16 step 0.001);
      anim float31 Trans0(-1024..1024 step 0.01);
    }

    layout flags TransformEnable1("-|transformed1");
    if(TransformEnable1&1)
    {
      anim float31 Scale1(-1024..1024 step 0.01) = 1;
      anim float30 Rot1(-16..16 step 0.001);
      anim float31 Trans1(-1024..1024 step 0.01);
    }

    layout flags TransformEnable2("-|transformed2");
    if(TransformEnable2&1)
    {
      anim float31 Scale2(-1024..1024 step 0.01) = 1;
      anim float30 Rot2(-16..16 step 0.001);
      anim float31 Trans2(-1024..1024 step 0.01);
    }

    layout flags TransformEnable3("-|transformed3");
    if(TransformEnable3&1)
    {
      anim float31 Scale3(-1024..1024 step 0.01) = 1;
      anim float30 Rot3(-16..16 step 0.001);
      anim float31 Trans3(-1024..1024 step 0.01);
    }

    layout flags TransformEnable4("-|transformed4");
    if(TransformEnable4&1)
    {
      anim float31 Scale4(-1024..1024 step 0.01) = 1;
      anim float30 Rot4(-16..16 step 0.001);
      anim float31 Trans4(-1024..1024 step 0.01);
    }

    layout flags TransformEnable5("-|transformed5");
    if(TransformEnable5&1)
    {
      anim float31 Scale5(-1024..1024 step 0.01) = 1;
      anim float30 Rot5(-16..16 step 0.001);
      anim float31 Trans5(-1024..1024 step 0.01);
    }

    layout flags TransformEnable6("-|transformed6");
    if(TransformEnable6&1)
    {
      anim float31 Scale6(-1024..1024 step 0.01) = 1;
      anim float30 Rot6(-16..16 step 0.001);
      anim float31 Trans6(-1024..1024 step 0.01);
    }

    layout flags TransformEnable7("-|transformed7");
    if(TransformEnable7&1)
    {
      anim float31 Scale7(-1024..1024 step 0.01) = 1;
      anim float30 Rot7(-16..16 step 0.001);
      anim float31 Trans7(-1024..1024 step 0.01);
    }

    group "Animation Script"; overbox overlabel linenumber lines 5 string Script;
  }
  code
  {
    RNModLight *node = new RNModLight;    
    node->ParaBase = *para;
    out->RootNode = node;
    out->AddChilds(cmd,para->Renderpass);
  }
  actions
  {
    if(code)
    {
      sU32 am=0;
      sU32 bm=0;
      sU32 cm=0;
      sInt bs=0;
      sInt cs=0;

      switch(code)
      {
      case 1:     // RG
        am = 0x0000ff;
        bm = 0xff0000; bs = 8;
        cm = 0x00ff00; cs = 8;
        break;
      case 2:     // RB
        am = 0x00ff00;
        bm = 0xff0000; bs = 16;
        cm = 0x0000ff; cs = 16;
        break;
      case 3:     // GB
        am = 0xff0000;
        bm = 0x00ff00; bs = 8;
        cm = 0x0000ff; cs = 8;
        break;
      }

      #define SWAPPER(col) col = (col&am) | ((col&bm)>>bs) | ((col&cm)<<cs) 
      SWAPPER(para->Ambient);
      SWAPPER(para->Front0);  SWAPPER(para->Back0);  SWAPPER(para->Middle0);
      SWAPPER(para->Front1);  SWAPPER(para->Back1);  SWAPPER(para->Middle1);
      SWAPPER(para->Front2);  SWAPPER(para->Back2);  SWAPPER(para->Middle2);
      SWAPPER(para->Front3);  SWAPPER(para->Back3);  SWAPPER(para->Middle3);
      SWAPPER(para->Front4);  SWAPPER(para->Back4);  SWAPPER(para->Middle4);
      SWAPPER(para->Front5);  SWAPPER(para->Back5);  SWAPPER(para->Middle5);
      SWAPPER(para->Front6);  SWAPPER(para->Back6);  SWAPPER(para->Middle6);
      SWAPPER(para->Front7);  SWAPPER(para->Back7);  SWAPPER(para->Middle7);
      #undef SWAPPER
      
      return 1;
    }
    return 0;
  }
  handles
  {
    sInt mode[8];
    sVector31 *ppos[8];
    sVector30 *pdir[8];
    sF32 *range[8];

    sInt max = 0;
    mode[max] = para->Mode0; ppos[max] = &para->Pos0; pdir[max] = &para->Dir0; range[max] = &para->Range0; max++;
    mode[max] = para->Mode1; ppos[max] = &para->Pos1; pdir[max] = &para->Dir1; range[max] = &para->Range1; max++;
    mode[max] = para->Mode2; ppos[max] = &para->Pos2; pdir[max] = &para->Dir2; range[max] = &para->Range2; max++;
    mode[max] = para->Mode3; ppos[max] = &para->Pos3; pdir[max] = &para->Dir3; range[max] = &para->Range3; max++;
    mode[max] = para->Mode4; ppos[max] = &para->Pos4; pdir[max] = &para->Dir4; range[max] = &para->Range4; max++;
    mode[max] = para->Mode5; ppos[max] = &para->Pos5; pdir[max] = &para->Dir5; range[max] = &para->Range5; max++;
    mode[max] = para->Mode6; ppos[max] = &para->Pos6; pdir[max] = &para->Dir6; range[max] = &para->Range6; max++;
    mode[max] = para->Mode7; ppos[max] = &para->Pos7; pdir[max] = &para->Dir7; range[max] = &para->Range7; max++;

    sSRT srt;
    sMatrix34 mat;
    if(para->TransformEnable)
    {
      srt.Scale = para->Scale;
      srt.Rotate = para->Rot;
      srt.Translate = para->Trans;
    }
    else
    {
      srt.Scale = sVector31(1);
      srt.Rotate = sVector30(0);
      srt.Translate = sVector31(0);
    }
    srt.MakeMatrix(mat);

    sMatrix34 matIndiv[8];
    for(sInt i=0;i<8;i++)
      matIndiv[i].Init();

    if(para->TransformEnable0)
    {
      srt.Scale = para->Scale0;
      srt.Rotate = para->Rot0;
      srt.Translate = para->Trans0;
      srt.MakeMatrix(matIndiv[0]);
    }

    if(para->TransformEnable1)
    {
      srt.Scale = para->Scale1;
      srt.Rotate = para->Rot1;
      srt.Translate = para->Trans1;
      srt.MakeMatrix(matIndiv[1]);
    }

    if(para->TransformEnable2)
    {
      srt.Scale = para->Scale2;
      srt.Rotate = para->Rot2;
      srt.Translate = para->Trans2;
      srt.MakeMatrix(matIndiv[2]);
    }

    if(para->TransformEnable3)
    {
      srt.Scale = para->Scale3;
      srt.Rotate = para->Rot3;
      srt.Translate = para->Trans3;
      srt.MakeMatrix(matIndiv[3]);
    }

    if(para->TransformEnable4)
    {
      srt.Scale = para->Scale4;
      srt.Rotate = para->Rot4;
      srt.Translate = para->Trans4;
      srt.MakeMatrix(matIndiv[4]);
    }

    if(para->TransformEnable5)
    {
      srt.Scale = para->Scale5;
      srt.Rotate = para->Rot5;
      srt.Translate = para->Trans5;
      srt.MakeMatrix(matIndiv[5]);
    }

    if(para->TransformEnable6)
    {
      srt.Scale = para->Scale6;
      srt.Rotate = para->Rot6;
      srt.Translate = para->Trans6;
      srt.MakeMatrix(matIndiv[6]);
    }

    if(para->TransformEnable7)
    {
      srt.Scale = para->Scale7;
      srt.Rotate = para->Rot7;
      srt.Translate = para->Trans7;
      srt.MakeMatrix(matIndiv[7]);
    }

    sVector31 * vStart;
    sVector30 vEnd;

    for(sInt i=0;i<max;i++)
    {
      sInt type = (mode[i]&15);
      switch(type)
      {
        case 0:   // off
          break;

        case 2:   // point

          // init vectors
          vStart = ppos[i];

          // update Handle pos
          *vStart *= matIndiv[i];
          pi.Handle3D(op,i+1, *vStart, wHM_PLANE);
          *vStart *= matIndiv[i].Inverse();

          // end = ground base
          vEnd.x = vStart->x;
          vEnd.y = 0;
          vEnd.z = vStart->z;

          // draw line
          pi.Line3D(*vStart * matIndiv[i], sVector31(vEnd) * matIndiv[i]);
          break;

        case 1:   // directionnal
        case 3:   // spot

          // init vectors
          vStart = ppos[i];
          vEnd = *pdir[i];

          // init line length
          vEnd.Unit();
          vEnd *= *range[i]/2;

          // update Handle pos
          *vStart *= matIndiv[i];
          pi.Handle3D(op,i+1, *vStart, wHM_PLANE);
          *vStart *= matIndiv[i].Inverse();

          // add pos to dir
          vEnd.x += vStart->x;
          vEnd.y += vStart->y;
          vEnd.z += vStart->z;

          // draw line
          pi.Line3D(*vStart * matIndiv[i], sVector31(vEnd) * matIndiv[i]);
          break;
      }
    }
  }
}


header_end
{
  class RNModMisc : public Wz4RenderNode
  {
  public:
    Wz4RenderParaModMisc Para,ParaBase;
    Wz4RenderAnimModMisc Anim;

    RNModMisc();
    ~RNModMisc();

    void Simulate(Wz4RenderContext *);
    void Render(Wz4RenderContext *);
  };
}

operator Wz4Render ModMisc (?Wz4Render)
{
  tab = Wz4Mtrl;
  column = 1;
  flags = obsolete|hide;
  parameter
  {
    int Index "EnvNum" (0..15);
    int Renderpass (-127..127);
    group "misc colors";
    anim color Color0("rgb"); nolabel float Amp0(0..1024 step 0.01) = 1;
    anim color Color1("rgb"); nolabel float Amp1(0..1024 step 0.01) = 1;
    anim color Color2("rgb"); nolabel float Amp2(0..1024 step 0.01) = 1;
    anim color Color3("rgb"); nolabel float Amp3(0..1024 step 0.01) = 1;
    anim color Color4("rgb"); nolabel float Amp4(0..1024 step 0.01) = 1;
    anim color Color5("rgb"); nolabel float Amp5(0..1024 step 0.01) = 1;
    anim color Color6("rgb"); nolabel float Amp6(0..1024 step 0.01) = 1;
    anim color Color7("rgb"); nolabel float Amp7(0..1024 step 0.01) = 1;
    group "misc vectors";
    anim float30 Vector0(-1000000..1000000 step 0.01);
    anim float30 Vector1(-1000000..1000000 step 0.01);
    anim float30 Vector2(-1000000..1000000 step 0.01);
    anim float30 Vector3(-1000000..1000000 step 0.01);
    anim float30 Vector4(-1000000..1000000 step 0.01);
    anim float30 Vector5(-1000000..1000000 step 0.01);
    anim float30 Vector6(-1000000..1000000 step 0.01);
    anim float30 Vector7(-1000000..1000000 step 0.01);
    group "misc matrix 0";
    anim float31 Scale0(-1024..1024 step 0.01) = 1;
    anim float30 Rot0(-16..16 step 0.001);
    anim float31 Trans0(-1024..1024 step 0.01);    
    group "misc matrix 1";
    anim float31 Scale1(-1024..1024 step 0.01) = 1;
    anim float30 Rot1(-16..16 step 0.001);
    anim float31 Trans1(-1024..1024 step 0.01);    
    group "misc matrix 2";
    anim float31 Scale2(-1024..1024 step 0.01) = 1;
    anim float30 Rot2(-16..16 step 0.001);
    anim float31 Trans2(-1024..1024 step 0.01);    
    group "misc matrix 3";
    anim float31 Scale3(-1024..1024 step 0.01) = 1;
    anim float30 Rot3(-16..16 step 0.001);
    anim float31 Trans3(-1024..1024 step 0.01);    

    group "Animation Script"; overbox overlabel linenumber lines 5 string Script;
  }
  code
  {
    RNModMisc *node = new RNModMisc;
    node->ParaBase = *para;
    out->RootNode = node;
    out->AddChilds(cmd,para->Renderpass);
  }
}

/****************************************************************************/

header_end
{
  class RNModMtrlEnv : public Wz4RenderNode
  {
  public:
    Wz4RenderParaModMtrlEnv Para,ParaBase;
    Wz4RenderAnimModMtrlEnv Anim;

    RNModMtrlEnv();
    ~RNModMtrlEnv();

    void Simulate(Wz4RenderContext *);
    void Render(Wz4RenderContext *);
  };
}

operator Wz4Render ModMtrlEnv (?Wz4Render)
{
  tab = Wz4Mtrl;
  column = 1;
  parameter
  {
    int Index "EnvNum" (0..15);
    int Renderpass (-127..127);
    group "misc colors";
    anim color Color0("rgba"); nolabel float Amp0(0..1024 step 0.01) = 1;
    anim color Color1("rgba"); nolabel float Amp1(0..1024 step 0.01) = 1;
    anim color Color2("rgba"); nolabel float Amp2(0..1024 step 0.01) = 1;
    anim color Color3("rgba"); nolabel float Amp3(0..1024 step 0.01) = 1;
    anim color Color4("rgba"); nolabel float Amp4(0..1024 step 0.01) = 1;
    anim color Color5("rgba"); nolabel float Amp5(0..1024 step 0.01) = 1;
    anim color Color6("rgba"); nolabel float Amp6(0..1024 step 0.01) = 1;
    anim color Color7("rgba"); nolabel float Amp7(0..1024 step 0.01) = 1;
    group "misc vectors";
    anim float4 Vector0(-1000000..1000000 step 0.01);
    anim float4 Vector1(-1000000..1000000 step 0.01);
    anim float4 Vector2(-1000000..1000000 step 0.01);
    anim float4 Vector3(-1000000..1000000 step 0.01);
    anim float4 Vector4(-1000000..1000000 step 0.01);
    anim float4 Vector5(-1000000..1000000 step 0.01);
    anim float4 Vector6(-1000000..1000000 step 0.01);
    anim float4 Vector7(-1000000..1000000 step 0.01);
    group "misc matrix 0";
    anim float31 Scale0(-1024..1024 step 0.01) = 1;
    anim float30 Rot0(-16..16 step 0.001);
    anim float31 Trans0(-1024..1024 step 0.01);
    group "misc matrix 1";
    anim float31 Scale1(-1024..1024 step 0.01) = 1;
    anim float30 Rot1(-16..16 step 0.001);
    anim float31 Trans1(-1024..1024 step 0.01);
    group "misc matrix 2";
    anim float31 Scale2(-1024..1024 step 0.01) = 1;
    anim float30 Rot2(-16..16 step 0.001);
    anim float31 Trans2(-1024..1024 step 0.01);
    group "misc matrix 3";
    anim float31 Scale3(-1024..1024 step 0.01) = 1;
    anim float30 Rot3(-16..16 step 0.001);
    anim float31 Trans3(-1024..1024 step 0.01);

    group "Animation Script"; overbox overlabel linenumber lines 5 string Script;
  }
  code
  {
    RNModMtrlEnv *node = new RNModMtrlEnv;
    node->ParaBase = *para;
    out->RootNode = node;
    out->AddChilds(cmd,para->Renderpass);
  }
}

/****************************************************************************/

header_end
{
  class RNModLightEnv : public Wz4RenderNode
  {
  public:
    Wz4RenderParaModLightEnv Para,ParaBase;
    Wz4RenderAnimModLightEnv Anim;

    RNModLightEnv();
    ~RNModLightEnv();

    void Simulate(Wz4RenderContext *);
    void Render(Wz4RenderContext *);
  };
}

operator Wz4Render ModLightEnv(?Wz4Render)
{
  tab = Wz4Mtrl;
  column = 1;
  flags = hide|obsolete;
  parameter
  {
    int Index "EnvNum" (0..15);
    int Renderpass (-127..127);

    layout flags Features ("-|Fog:*1-|GroundFog:*2-|Clip Planes");

    if(Features & 1)
    {
      group "Fog";
      anim float FogNear(-1000000..1000000 step 0.01) = 0;
      anim float FogFar(-1000000..1000000 step 4) = 1000;
      anim float FogDensity(0..1 step 0.002) = 1;
      anim color FogColor("rgb")=0xffffff;
      if(0) int dummya[2];
    }

    if(Features & 2)
    {
      group "Ground Fog";
      anim float GroundFogNear(-1000000..1000000 step 0.01) = 0;
      anim float GroundFogFar(-1000000..1000000 step 4) = 12;
      anim float GroundFogDensity(0..1 step 0.002) = 1;
      anim color GroundFogColor("rgb")=0xffffff;
      anim float4 GroundFogPlane(-1000000..1000000 step 0.01) = { 0,1,0,0 };
      if(0) int dummyb[2];
    }

    if(Features & 4)
    {
      group "Clip Planes";
      layout flags ClipEnable "Clip0" ("-|on");
      if(ClipEnable & 1)
        nolabel anim float4 Clip0(-1000000..1000000 step 0.01) = { 1,0,0,0 };
      layout continue flags ClipEnable "Clip1" ("*1-|on");
      if(ClipEnable & 2)
        nolabel anim float4 Clip1(-1000000..1000000 step 0.01) = { 1,0,0,0 };
      layout continue flags ClipEnable "Clip2" ("*2-|on");
      if(ClipEnable & 4)
        nolabel anim float4 Clip2(-1000000..1000000 step 0.01) = { 1,0,0,0 };
      layout continue flags ClipEnable "Clip3" ("*3-|on");
      if(ClipEnable & 8)
        nolabel anim float4 Clip3(-1000000..1000000 step 0.01) = { 1,0,0,0 };
    }

    group "Animation Script"; overbox overlabel linenumber lines 5 string Script;
  }
  code
  {
    RNModLightEnv *node = new RNModLightEnv;
    node->ParaBase = *para;
    out->RootNode = node;
    out->AddChilds(cmd,para->Renderpass);
  }
}

/****************************************************************************/

header_end
{
  class RNModFog : public Wz4RenderNode
  {
  public:
    Wz4RenderParaModFog Para,ParaBase;
    Wz4RenderAnimModFog Anim;

    RNModFog();
    ~RNModFog();

    void Simulate(Wz4RenderContext *);
    void Render(Wz4RenderContext *);
  };
}

operator Wz4Render ModFog(?Wz4Render)
{
  tab = Wz4Mtrl;
  column = 1;
  parameter
  {
    int Index "EnvNum" (0..15);
    int Renderpass (-127..127);

    layout flags Features ("-|Fog:*1-|GroundFog");

    if(Features & 1)
    {
      group "Fog";
      anim float FogNear(-1000000..1000000 step 0.01) = 0;
      anim float FogFar(-1000000..1000000 step 4) = 1000;
      anim float FogDensity(0..1 step 0.002) = 1;
      anim color FogColor("rgb")=0xffffff;
      if(0) int dummya[2];
    }

    if(Features & 2)
    {
      group "Ground Fog";
      anim float GroundFogNear(-1000000..1000000 step 0.01) = 0;
      anim float GroundFogFar(-1000000..1000000 step 4) = 12;
      anim float GroundFogDensity(0..1 step 0.002) = 1;
      anim color GroundFogColor("rgb")=0xffffff;
      anim float4 GroundFogPlane(-1000000..1000000 step 0.01) = { 0,1,0,0 };
      if(0) int dummyb[2];
    }

    group "Animation Script"; overbox overlabel linenumber lines 5 string Script;
  }
  code
  {
    RNModFog *node = new RNModFog;
    node->ParaBase = *para;
    out->RootNode = node;
    out->AddChilds(cmd,para->Renderpass);
  }
}

/****************************************************************************/

header_end
{
  class RNModClipTwister : public Wz4RenderNode
  {
  public:
    Wz4RenderParaModClipTwister Para,ParaBase;
    Wz4RenderAnimModClipTwister Anim;

    RNModClipTwister();
    ~RNModClipTwister();

    void Simulate(Wz4RenderContext *);
    void Render(Wz4RenderContext *);
  };
}

operator Wz4Render ModClipTwister(?Wz4Render)
{
  tab = Wz4Mtrl;
  column = 1;
  flags = hide|obsolete;
  parameter
  {
    int Index "EnvNum" (0..15);
    int Renderpass (-127..127);

    group "Clip Planes";
    layout flags ClipEnable "Clip0" ("-|on");
    if(ClipEnable & 1)
      nolabel anim float4 Clip0(-1000000..1000000 step 0.01) = { 1,0,0,0 };
    layout continue flags ClipEnable "Clip1" ("*1-|on");
    if(ClipEnable & 2)
      nolabel anim float4 Clip1(-1000000..1000000 step 0.01) = { 1,0,0,0 };
    layout continue flags ClipEnable "Clip2" ("*2-|on");
    if(ClipEnable & 4)
      nolabel anim float4 Clip2(-1000000..1000000 step 0.01) = { 1,0,0,0 };
    layout continue flags ClipEnable "Clip3" ("*3-|on");
    if(ClipEnable & 8)
      nolabel anim float4 Clip3(-1000000..1000000 step 0.01) = { 1,0,0,0 };

    group "Transform";

    anim float31 Scale(-1024..1024 step 0.01) = 1;
    anim float30 Rot(-16..16 step 0.001);
    anim float31 Trans(-1024..1024 step 0.01);    

    group "Animation Script"; overbox overlabel linenumber lines 5 string Script;
  }
  code
  {
    RNModClipTwister *node = new RNModClipTwister;
    node->ParaBase = *para;
    out->RootNode = node;
    out->AddChilds(cmd,para->Renderpass);
  }
}

/****************************************************************************/

header_end
{
  class RNModClipTwister2 : public Wz4RenderNode
  {
  public:
    Wz4RenderParaModClipTwister2 Para,ParaBase;
    Wz4RenderAnimModClipTwister2 Anim;

    RNModClipTwister2();
    ~RNModClipTwister2();

    void Simulate(Wz4RenderContext *);
    void Render(Wz4RenderContext *);
  };
}

operator Wz4Render ModClipTwister2 "ModClipTwister" (?Wz4Render)
{
  tab = Wz4Mtrl;
  column = 1;
  parameter
  {
    int Index "EnvNum" (0..15);
    int Renderpass (-127..127);

    group "Clip Planes";
    layout flags ClipEnable "Clip0" ("-|on");
    if(ClipEnable & 1)
    {
      float2 HandleSize0 (-1024..1024 step 0.001) = 4.0;
      anim float31 Rot0 (-1024..1024 step 0.001) = 0;
      anim float31 Trans0 (-1024..1024 step 0.001) = 0;
    }
    layout continue flags ClipEnable "Clip1" ("*1-|on");
    if(ClipEnable & 2)
    {
      float2 HandleSize1 (-1024..1024 step 0.001) = 4.0;
      anim float31 Rot1 (-1024..1024 step 0.001) = 0;
      anim float31 Trans1 (-1024..1024 step 0.001) = 0;
    }
    layout continue flags ClipEnable "Clip2" ("*2-|on");
    if(ClipEnable & 4)
    {
      float2 HandleSize2 (-1024..1024 step 0.001) = 4.0;
      anim float31 Rot2 (-1024..1024 step 0.001) = 0;
      anim float31 Trans2 (-1024..1024 step 0.001) = 0;
    }
    layout continue flags ClipEnable "Clip3" ("*3-|on");
    if(ClipEnable & 8)
    {
      float2 HandleSize3 (-1024..1024 step 0.001) = 4.0;
      anim float31 Rot3 (-1024..1024 step 0.001) = 0;
      anim float31 Trans3 (-1024..1024 step 0.001) = 0;
    }

    group "Transform";

    anim float31 Scale(-1024..1024 step 0.01) = 1;
    anim float30 Rot(-16..16 step 0.001);
    anim float31 Trans(-1024..1024 step 0.01);

    group "Handle options";
    layout flags HandleFlag "Type" ("default|boxLine") = 0;
    if(HandleFlag == 0)
    {
      layout flags HandleFlagColor "Color" ("custom|theme") = 1;
      if(HandleFlagColor == 0)
        nolabel color HandleColor ("rgba") = 0x00ffffff;
    }

    group "Animation Script"; overbox overlabel linenumber lines 5 string Script;
  }
  code
  {
    RNModClipTwister2 *node = new RNModClipTwister2;
    node->ParaBase = *para;
    out->RootNode = node;
    out->AddChilds(cmd,para->Renderpass);
  }
  handles
  {
    if(para->ClipEnable & 1)
    {
      sSRT srt0;
      srt0.Scale = sVector31(0.01, para->HandleSize0.x, para->HandleSize0.y);
      srt0.Rotate = sVector30(para->Rot0);
      srt0.Translate = sVector31(para->Trans0);

      if(para->HandleFlag==0)
        pi.Box3D(srt0.Scale,srt0.Rotate,srt0.Translate,para->HandleFlagColor,para->HandleColor);
      else
        pi.Box3DLine(srt0.Scale,srt0.Rotate,srt0.Translate);
     }

     if(para->ClipEnable & 2)
    {
      sSRT srt1;
      srt1.Scale = sVector31(0.01, para->HandleSize1.x, para->HandleSize1.y);
      srt1.Rotate = sVector30(para->Rot1);
      srt1.Translate = sVector31(para->Trans1);

      if(para->HandleFlag==0)
        pi.Box3D(srt1.Scale,srt1.Rotate,srt1.Translate,para->HandleFlagColor,para->HandleColor);
      else
        pi.Box3DLine(srt1.Scale,srt1.Rotate,srt1.Translate);
     }

     if(para->ClipEnable & 4)
    {
      sSRT srt2;
      srt2.Scale = sVector31(0.01, para->HandleSize2.x, para->HandleSize2.y);
      srt2.Rotate = sVector30(para->Rot2);
      srt2.Translate = sVector31(para->Trans2);

      if(para->HandleFlag==0)
        pi.Box3D(srt2.Scale,srt2.Rotate,srt2.Translate,para->HandleFlagColor,para->HandleColor);
      else
        pi.Box3DLine(srt2.Scale,srt2.Rotate,srt2.Translate);
     }

     if(para->ClipEnable & 8)
    {
      sSRT srt3;
      srt3.Scale = sVector31(0.01, para->HandleSize3.x, para->HandleSize3.y);
      srt3.Rotate = sVector30(para->Rot3);
      srt3.Translate = sVector31(para->Trans3);

      if(para->HandleFlag==0)
        pi.Box3D(srt3.Scale,srt3.Rotate,srt3.Translate,para->HandleFlagColor,para->HandleColor);
      else
        pi.Box3DLine(srt3.Scale,srt3.Rotate,srt3.Translate);
     }
  }
}

/****************************************************************************/
/****************************************************************************/
